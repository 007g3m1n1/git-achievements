#!/bin/bash
#
# Copyright (c) 2010, Benjamin C. Meyer <ben@meyerhome.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#    This product includes software developed by the <organization>.
# 4. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

ACTIONLOGFILE="$HOME/.git-achievements-action.log"
ACHIEVEMENTSLOGFILE="$HOME/.git-achievements.log"

function output_achievement
{
echo "
********************************************************************************
Git Achievement Unlocked!

$1
$2
********************************************************************************
" |  sed  -e :a -e 's/^.\{1,79\}$/ & /;ta'
}

function publish_achievements
{
    gh_pages=`which git-achievements`
    gh_pages=`dirname $gh_pages`
    cd $gh_pages

    user=`git config --global user.name`

echo "
<head>
<title>${user}'s Git Achievements</title>
<style type=\"text/css\">
body {
    background-color: black;
    color: white;
    margin: 0 auto;
    width: 600px;
    text-align: center;
}
li.achievement {
    background-color: #1E2024;
    border: 1px solid gray;
    padding: .25em;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    margin-bottom: .5em;
}
div.title {
    font-weight: bold;
}
ul {
    text-align: left;
    list-style-type:none;
}

</style>
</head>
<body>
" > index.html

    echo "<h2>${user}'s Git Achievements</h2>" >> index.html

    total=`cat ${ACHIEVEMENTSLOGFILE} | grep Unlocked | wc -l`
    echo "<center>${total} <a href=\"http://github.com/icefox/git-achievements\">Git Achievements</a> unlocked</center><br>" >> index.html

    echo "<ul>" >> index.html
    cat ${ACHIEVEMENTSLOGFILE} | grep -v '^$' | grep -v 'Git Achievement Unlocked!' | grep -v '*' | sed -e 's/^ *//g'  -e 's/ *$//g' | awk '{ if (NR % 2 != 0) printf "<li class=\"achievement\">  <div class=\"title\">" $0 "</div>"; else printf "  <div class=\"info\">" $0 "</div></li>\n" }' | tac >> index.html

    echo "</ul>" >> index.html

    echo "</body></html>" >> index.html

    git add index.html
    git commit -m "New achievement $1"
    git push origin
}

function unlock_achievement
{
    grep "$1" ${ACHIEVEMENTSLOGFILE} > /dev/null
    if [ $? -eq 0 ] ; then
        return
    fi
    output_achievement "$@"
    output_achievement "$@" >> ${ACHIEVEMENTSLOGFILE}

    if [ `git config --global achievement.upload` = "true" ] ; then
        publish_achievements $@
    fi
}

function log_action
{
    echo "$@" >> ${ACTIONLOGFILE}
    echo -n "Date: " >> ${ACTIONLOGFILE}
    date >> ${ACTIONLOGFILE}
}

function execute_achivements_command
{
    case $2 in
        -p )
            publish_achievments
            ;;
        -a )
            cat ${ACHIEVEMENTSLOGFILE}
            ;;
        * )
            echo "Git Achievements"
            count=`cat ${ACHIEVEMENTSLOGFILE}| grep Unlocked | wc -l`
            echo ""
            echo "You currently have: $count achievements"
            echo ""
            echo "Options:"
            echo "    -a show all achievements"
            ;;
    esac
}

function count_command
{
    export powerof2=`awk "START {n=0} /$1/ {n++} END { print and(n, n-1) }" $ACTIONLOGFILE`
    export power=`awk "START {n=0} /$1/ {n++} END { print log(n)/log(2) }" $ACTIONLOGFILE`
    export count=`awk "START {n=0} /$1/ {n++} END { print n }" $ACTIONLOGFILE`
    #echo "$1 $powerof2 $power $count"
}

function check_for_achivements
{
   case $1 in
        achievements )
            execute_achivements_command "$@"
            exit $?
            ;;

        add )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Stone Mason (Level $power)" "$count additions to the staging area."
            fi
            case $2 in
                *.gitignore )
                unlock_achievement "Caretaker" "Kept your repository clean by adding a .gitignore file"
                ;;
                -p )
                count_command "add -p"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Miller (Level $power)" "Add only part of a file to the stage $count times."
                fi
                ;;
            esac
            ;;
        am )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Messenger (Level $power)" "Apply a patch using am $count times."
            fi
            ;;
        bisect )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Hunter (Level $power)" "Used git bisect $count times"
            fi
            ;;
        blame )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Investigator (Level $power)" "$count hunts for the owner of changes using blame."
            fi
            ;;
        cherry-pick )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Cherry Picker (Level $power)" "$count cherry-picks"
            fi
            ;;
        checkout )
            case $2 in
                -b )
                count_command "checkout -b"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Blacksmith (Level $power)" "$count new branches."
                fi
                ;;
            esac
            ;;
        commit )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Wisdom (Level $power)" "$count commits"
            fi
            case $2 in
                --amend )
                count_command "commit --amend"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Seamstress (Level $power)" "$count amended commits."
                fi
                ;;
                -s )
                count_command "commit -s"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Locksmith (Level $power)" "$count signed commits."
                fi
                ;;
            esac
            ;;
        config )
            if [[ $# -ge 4 && $2 = "--global" && $3 = "user.name" ]] ; then
                unlock_achievement "Homeowner" "Set global user name."
            fi
            if [[ $# -ge 4 && $2 = "--global" && $3 = "user.email" ]] ; then
                unlock_achievement "Homeowner (Level 2)" "Set global email address."
            fi
            ;;
        diff )
            case $2 in
                --cached )
                count_command "diff --cached"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Goldsmith (Level $power)" "$count reviewed patches before committing."
                fi
                ;;
            esac

            ;;
        gc )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Chimney Sweeper" "$count garbage collections"
            fi
            ;;
        init )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Architect (Level $power)" "$count new Git repositories"
            fi
            ;;
        log )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Historian (Level $power)" "Investigate the log $count times"
            fi
            case $2 in
                -p* )
                unlock_achievement "Dentist" "Extract patches with git log."
                ;;
                -S* )
                unlock_achievement "Librarian" "Searched for a specific string with git log."
                ;;
            esac
            ;;
        push )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Socialite (Level $power)" "$count pushes to a remote repository"
            fi
            ;;
        rebase )
            case $2 in
                -i )
                count_command "rebase -i"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Butcher (Level $power)" "$count interactive rebases."
                fi
                ;;
            esac
            ;;
        reflog )
            unlock_achievement "Weaver" "Investigate old branches"
            ;;
        remote )
            case $2 in
                add )
                count_command "remote add"
                if [ "${powerof2}" = "0" ] ; then
                    unlock_achievement "Merchant (Level $power)" "Added $count external repositories."
                fi
                ;;
            esac
            ;;
        svn|p4 )
            count_command "$@"
            if [ "${powerof2}" = "0" ] ; then
                unlock_achievement "Traveler (Level $power)" "$count dealings with another rcs."
            fi
            ;;
    esac

    case $2 in
        --help )
            unlock_achievement "Student" "Accessed the documentation for a Git command"
            ;;
    esac

    hooks=`ls .git/hooks/ | grep -v sample | wc -l`
    if [ $hooks -ge 1 ] ; then
        unlock_achievement "Master Carpenter (Level: $hooks)" "Custom installed hooks."
    fi
}

if [ $1 != "achievements" ] ; then
    git "$@"
fi

log_action $@
check_for_achivements $@

